<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>convention on Super Pork Chop</title>
    <link>http://www.example.com/tags/convention/</link>
    <description>Recent content in convention on Super Pork Chop</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 07 Aug 2020 00:00:00 -0400</lastBuildDate>
    
	<atom:link href="http://www.example.com/tags/convention/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Calling Conventions for Pwn and Profit</title>
      <link>http://www.example.com/posts/calling-conventions-for-pwn-and-profit/</link>
      <pubDate>Fri, 07 Aug 2020 00:00:00 -0400</pubDate>
      
      <guid>http://www.example.com/posts/calling-conventions-for-pwn-and-profit/</guid>
      <description>Shellcoders and reverse engineers often need intimate knowledge of the registers used in calling functions and syscalls. This is a compressed cheatsheet of some of the most important conventions with a light sprinkling of mnemonics and links to more detailed information.
NOTE: If there are more arguments than registers listed, the remaining arguments are passed on the stack (from right-to-left). Syscall information given is for Linux.
x86  argument passing (cdecl): all arguments passed on the stack argument passing (stdcall): all arguments passed on the stack argument passing (fastcall): ecx, edx argument passing (thiscall): ecx gets &amp;ldquo;this&amp;rdquo; pointer; other arguments passed on the stack return value: eax syscall argument passing: ebx, ecx, edx, esi, edi, ebp  mnemonic: bcd sdb (&amp;ldquo;bcd is super dumb binary&amp;rdquo;)   syscall number: eax syscall table  x86_64  argument passing (Linux): rdi, rsi, rdx, rcx, r8, r9  mnemonic: &amp;ldquo;dizzy dixie 89&amp;rdquo; -&amp;gt; &amp;ldquo;disi dxcx 89&amp;rdquo;   argument passing (Windows): rcx, rdx, r8, r9 return value: rax syscall argument passing: rdi, rsi, rdx, r10, r8, r9  mnemonic: &amp;ldquo;dizzy dick 1089&amp;rdquo; -&amp;gt; &amp;ldquo;disi dx 1089&amp;rdquo;   syscall number: rax syscall table  ARM (32-bit)  argument passing: r0-r3 return value: r0 r4-r11 are callee-save registers (r9 may or may not be) syscall argument passing: r0-r6 syscall number: r7  ARM (64-bit)  argument passing: r0-r7 return value: r0 r19-r28 are callee-saved registers syscall argument passing: r0-r5 syscall number: r8  MIPS  argument passing (O32): a0-a3 argument passing (N32/N64): a0-a7 return value(s): v0, v1  RISC-V  argument passing: a0-a7 return value(s): a0, a1  PowerPC (32-bit)  argument passing: gpr3-gpr10 return value: gpr3 gpr3-gpr12 are caller-saved registers  References x86  https://lospi.</description>
    </item>
    
  </channel>
</rss>